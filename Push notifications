import UIKit
import UserNotifications
import CloudKit

@main
class AppDelegate: UIResponder, UIApplicationDelegate,UNUserNotificationCenterDelegate {

    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        
        let center = UNUserNotificationCenter.current()
        
        center.delegate = self
        
        center.requestAuthorization(options: [.badge]){
            (granted, _) in
            if granted {
                DispatchQueue.main.async{
                  //push notification
                    UIApplication.shared.registerForRemoteNotifications()
                    }
        
            }
        
        
        }
        
      
        
//        let yesAction = UNNotificationAction(identifier: "yes", title: "Yes",options: [])
//
//        let runNotificationCategory = UNNotificationCategory(identifier: "RunNotification", actions: [yesAction], intentIdentifiers: [], options: [])
//
//        center.setNotificationCategories([runNotificationCategory])

        
        return true
    }
    
    
    
    //Banner
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {


        completionHandler([.banner,.sound])
    }
    
    
    //Response
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {

        //website 

         if let urlString = response.notification.request.content.userInfo["url"] as? String,
           let url = URL(string: urlString){
            UIApplication.shared.open(url)
        }
  
//        switch response.actionIdentifier{
//
//        case "yes":
//
//        default :
//            return
//
//        }


        completionHandler()
    }
    
    //push notification device Token
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        
        let token = deviceToken.map{ String(format: "%.2hhx", $0) }.joined()
        print("Device Token: \(String(describing: token))")

       //save device token to Cloudkit
        saveDeviceTokentoCloudkit(token)
        
    }

    func saveDeviceTokentoCloudkit(_ token: String){
       
        let container = CKContainer.default()
        
        container.fetchUserRecordID{ userRecordID, error in
            
            guard let userRecordID = userRecordID,error == nil else {
                
                print("Failed to fetch userRecordID...")
                
                return
            }
            
            let userReference = CKRecord.Reference(recordID: userRecordID, action: .none)
           
            let recordID = CKRecord.ID(recordName: UUID().uuidString)
                
            let record = CKRecord(recordType: "Notifications")
                 
                record["owner"] = userReference
            
                record["deviceToken"] = token as CKRecordValue
            
                record["Date"] = Date() as CKRecordValue
                
                container.publicCloudDatabase.save(record) { savedRecord, saveError in
                    
                    if let saveError = saveError {
                        print("Failed to save device token...\(saveError.localizedDescription)")
                    } else {
                        
                        print("Device token is successfully saved to cloudkit.")
                    }
                }
            
        }
        
        
        
    }
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("(error.localizedDescription")
    }
